@using Nebula.Services
@using Nebula.Domain.Abstractions.Services
@inject IUserCredentialsService UserCredentialsService

@{
    var credentials = UserCredentialsService.GetCredentials();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nebula</title>
    <link rel="stylesheet" href="~/dist/bundle.min.css">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <script src="~/dist/bundle.min.js" defer></script>
    @RenderSection("styles", false)
</head>
<body>
    <nav class="navbar" x-data="dropdown">
        <span class="app-title">Nebula</span>

        @if (@User.Identity!.IsAuthenticated && credentials is not null) 
        {
            <img class="profile-avatar" src="@credentials.AvatarURI" x-on:click="toggle" /> 

            <div class="dropdown" x-show="visible" x-transition x-on:click.outside="clickOutside" x-cloak>
                <div class="account-container">
                    <img class="profile" src="@credentials.AvatarURI" />

                    <div class="text-info">
                        <span class="username">@credentials.Username</span>
                        <span class="email">@credentials.Email</span>
                    </div>
                </div>

                <div class="options">
                    <a class="option-link">Generate</a>
                    <a class="option-link">Settings</a>
                    <button class="default-button sign-out" x-on:click="signOut">Sign out</button>
                </div>
            </div> 
        }
    </nav>

    <div id="app">
        @RenderBody()
    </div>

    @RenderSection("scripts", false)
</body>
</html>